require FabricSynchronization;
require PointDistribute;

operator parallelReads<<<index>>>(io FastReadersWriterLock lock)
{
	lock.acquireRead();
	report(index + " " + getThreadIndex() + " start");
	UInt32 numPoints = 50;
	Point points[];
	points.resize(numPoints);
	hammersleyDistributePoints<<<numPoints>>>(points, numPoints);
	report(index + " " + getThreadIndex() + "end");
	lock.releaseRead();
}

operator entry()
{
	FastReadersWriterLock lock();
	parallelReads<<<2>>>(lock);
}

