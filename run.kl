require Geometry;
require FileIO;
require AlembicWrapper;
require PointDistribute;
require Math;

function Boolean readFabricFrog(io PolygonMesh mesh)
{
	FilePath filePath("${FABRIC_DIR}/Resources/frog.abc");
	filePath = filePath.expandEnvVars();
	String filePathStr = filePath.string();
	AlembicArchiveReader aaReader(filePathStr);
	String allPaths[];
	allPaths = aaReader.getAllPaths();
	String path;
	for(UInt32 i = 0; i < allPaths.size(); ++i)
	{
		if(aaReader.getObjectType(allPaths[i]) == "PolyMesh")
		{
			path = allPaths[i];
			break;
		}
	}
	if( path == "" )
	{
		report("No mesh found");
		return PolygonMesh();
	}

	AlembicPolyMeshReader reader = aaReader.getPolyMesh(path);
	reader.readSample(0.0, true, mesh);

	return mesh;
}

operator entry() {

	// Region to sprinkle points.
	SimpleRectRegion region(Point(-12.0, -1.0, -15.0), Point(13, 20, 20));

	// Result array.
	Point points[];
	points.resize(65536);

	// Distribute.
	UInt32 seed = 0;
	//UInt32 numPexThreads = getThreadCount();
	UInt32 numPexThreads = 1;

	PolygonMesh mesh();
	if( ! readFabricFrog(mesh))
	{
		return;
	}
	mesh.applyTransform(Xfo(Quat(), Vec3(), Vec3(3, 3, 3)));
	mesh.prepareForSpatialQueries(65536, null);

	PoissonDiskData pData(numPexThreads, points, region, seed, mesh);
	numPexThreads = Math_min(numPexThreads, pData.numPoints);

	PoissonDiskDistributor distributors[];
	for(UInt32 i = 0; i < numPexThreads; ++i)
	{
		distributors.push(PoissonDiskDistributor(seed, pData));
	}
	poissonDiskDistributePoints<<<numPexThreads>>>(pData, distributors);

	// Assumed resize doesn't change [0..numPoints) data.
	points.resize(pData.numPoints);

	report("# points: " + pData.numPoints);

	// Find very small number of wrong points due to multi-threading.

	UInt32 wrongPointIndices[];
	wrongPointIndices.resize(pData.numPoints);
	findWrongPoints<<<pData.numPoints>>>(wrongPointIndices, pData);

	// Remove them in single thread.
	removeWrongPoints(pData, wrongPointIndices);

	report("final # points " + pData.numPoints);

	//Display result.

	// Point bBoxMin, bBoxMax;
	// region.getBoundingBox(bBoxMin, bBoxMax);
	// report("p = []");
	// for(UInt32 i = 0; i < pData.numPoints; ++i)
	// {
	// 	Float32 x = points[i].x;
	// 	Float32 y = points[i].y;
	// 	Float32 z = points[i].z;
	// 	report("p.append((" + x + ", " + y + ", " + z + "))");
	// }
}

